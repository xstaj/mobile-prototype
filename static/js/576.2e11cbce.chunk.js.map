{"version":3,"file":"static/js/576.2e11cbce.chunk.js","mappings":"oLAyBe,SAASA,EAAaC,IACnCC,EAAAA,EAAAA,GAAa,EAAGC,WAChB,IAAIC,GAAOC,EAAAA,EAAAA,GAAOJ,GAGlB,OAFAG,EAAKE,QAAQ,GACbF,EAAKG,SAAS,EAAG,EAAG,EAAG,GAChBH,E,yBCzBTI,EAAAA,EAAAA,IAAe,CACbC,cAAeC,EAAAA,GACfC,OAAQ,SAACC,EAAQC,GACf,OAAQD,EAAOE,SACb,IAAK,OACH,OAYR,SAAiCD,GAC/BA,EAAYE,UACVC,EAAAA,EAAAA,IAAqB,CACnBC,MAAMC,EAAAA,EAAAA,GAAY,IAAIC,MAAQC,cAC9BC,IAAI,IAAIF,MAAOC,iBAhBNE,CAAwBT,GAEjC,IAAK,QACH,OAkBR,SAAkCA,GAChCA,EAAYE,UACVC,EAAAA,EAAAA,IAAqB,CACnBC,KAAMjB,EAAa,IAAImB,MAAQC,cAC/BC,IAAI,IAAIF,MAAOC,iBAtBNG,CAAyBV,GAElC,IAAK,MACH,OAwBR,SAAgCA,GAC9BA,EAAYE,UACVC,EAAAA,EAAAA,IAAqB,CACnBC,KAAM,IAAIE,KAAK,+BAA+BC,cAC9CC,IAAI,IAAIF,MAAOC,iBA5BNI,CAAuBX","sources":["../node_modules/date-fns/esm/startOfMonth/index.js","modules/Performance/listener.ts"],"sourcesContent":["import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfMonth\n * @category Month Helpers\n * @summary Return the start of a month for the given date.\n *\n * @description\n * Return the start of a month for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a month for 2 September 2014 11:55:00:\n * const result = startOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Mon Sep 01 2014 00:00:00\n */\n\nexport default function startOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setDate(1);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import { ListenerApi, startListening } from 'app/store/actionListenerMiddleware';\nimport startOfMonth from 'date-fns/startOfMonth';\nimport startOfYear from 'date-fns/startOfYear';\nimport { setSpecificTimeRange, updateTimeRange } from './actions';\n\nstartListening({\n  actionCreator: updateTimeRange,\n  effect: (action, listenerApi) => {\n    switch (action.payload) {\n      case 'year': {\n        return setTimeRangeForThisYear(listenerApi);\n      }\n      case 'month': {\n        return setTimeRangeForThisMonth(listenerApi);\n      }\n      case 'all': {\n        return setTimeRangeForAllTime(listenerApi);\n      }\n    }\n  },\n});\n\nfunction setTimeRangeForThisYear(listenerApi: ListenerApi) {\n  listenerApi.dispatch(\n    setSpecificTimeRange({\n      from: startOfYear(new Date()).toISOString(),\n      to: new Date().toISOString(),\n    }),\n  );\n}\n\nfunction setTimeRangeForThisMonth(listenerApi: ListenerApi) {\n  listenerApi.dispatch(\n    setSpecificTimeRange({\n      from: startOfMonth(new Date()).toISOString(),\n      to: new Date().toISOString(),\n    }),\n  );\n}\n\nfunction setTimeRangeForAllTime(listenerApi: ListenerApi) {\n  listenerApi.dispatch(\n    setSpecificTimeRange({\n      from: new Date('2019-09-11T00:00:00.000000Z').toISOString(),\n      to: new Date().toISOString(),\n    }),\n  );\n}\n"],"names":["startOfMonth","dirtyDate","requiredArgs","arguments","date","toDate","setDate","setHours","startListening","actionCreator","updateTimeRange","effect","action","listenerApi","payload","dispatch","setSpecificTimeRange","from","startOfYear","Date","toISOString","to","setTimeRangeForThisYear","setTimeRangeForThisMonth","setTimeRangeForAllTime"],"sourceRoot":""}